<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="composite.model.Composite">
	<select id = "GetTrainerCount" resultType = "int">
		select count(*) from
		((select id, gnum, activity, purpose, intro, exp, timage, avg(rating) as rating
		from trainer join review
		on id = tid
		group by id, gnum, activity, purpose, intro, exp, timage
		order by rating desc)
		natural join 
		(select distinct tid as id, hasReview from review))
		natural join
		((select id, name from trainer natural join member)
		natural join
		(select id, gnum, gaddr1 from trainer natural join gym))
		where id is not null
		<if test = "activity != 'null'">
			and activity = #{activity}
		</if>
		<if test = "addressDo != '%null%'">
			and gaddr1 like #{addressDo}
		</if>
		<if test = "addressSiGunGu != '%null%'">
			and gaddr1 like #{addressSiGunGu}
		</if>
		<if test = "purposeA != '%null%'">
			and purpose like #{purposeA}
		</if>
		<if test = "purposeB != '%null%'">
			and purpose like #{purposeB}
		</if>
		<if test = "purposeC != '%null%'">
			and purpose like #{purposeC}
		</if>
		<if test = "purposeD != '%null%'">
			and purpose like #{purposeD}
		</if>
    	</select>
	<select id = "GetTrainerList" resultType = "composite.model.TrainerListBean">
		select * from(
					  select t.id, t.gnum, t.activity, t.purpose, t.intro, t.exp, t.timage, t.rating, r.hasreview
					  from   (
							  (select id, gnum, activity, purpose, intro, exp, timage, avg(rating) as rating
							   from trainer join review
							 				  on id = tid
							   group by id, gnum, activity, purpose, intro, exp, timage
							   order by rating desc) t
							   left outer join
							  (select distinct tid as id, hasReview from review) r
						     on t.id = r.id
						   )
						   order by rating desc
			   		   )
			   natural join
			   (
			    (select id, name from trainer natural join member)
			     natural join
			    (select id, gnum, gaddr1 from trainer natural join gym)
			   )
		where  1 = 1
		<if test = "activity != 'null'">
			and activity = #{activity}
		</if>
		<if test = "addressDo != '%null%'">
			and gaddr1 like #{addressDo}
		</if>
		<if test = "addressSiGunGu != '%null%'">
			and gaddr1 like #{addressSiGunGu}
		</if>
		<if test = "purposeA != '%null%'">
			and purpose like #{purposeA}
		</if>
		<if test = "purposeB != '%null%'">
			or purpose like #{purposeB}
		</if>
		<if test = "purposeC != '%null%'">
			or purpose like #{purposeC}
		</if>
		<if test = "purposeD != '%null%'">
			or purpose like #{purposeD}
		</if>
		<if test = "ordering == 'review'">
			order by hasReview desc, rating desc
		</if>
	</select>
	<select id = "GetSimilarTrainers" resultType = "composite.model.TrainerListBean">
		select * from
		((select id, gnum, activity, purpose, intro, exp, timage, avg(rating) as rating
		from trainer join review
		on id = tid
		group by id, gnum, activity, purpose, intro, exp, timage
		order by rating desc)
		natural join 
		(select distinct tid as id, hasReview from review))
		natural join
		((select id, name from trainer natural join member)
		natural join
		(select id, gnum, gaddr1 from trainer natural join gym))
		where activity = #{activity}
	</select>
		<select id="GetTrainerListByTid" resultType = "composite.model.TrainerListSBean">
		select t.activity, t.purpose, t.timage, m.name, m.id from trainer t,member m
		where t.id=m.id and t.id=#{tid}
	</select>
	<select id="ReservationDetailBean" resultType = "composite.model.ReservationDetailBean">
		select r.rdate, r.rtime, m.id, m.birth,m.mphone,m.email,m.name from reservation r,member m
		where r.mid=m.id and r.rnum=#{rnum}
	</select>
	<select id = "GetWeeklySales" resultType = "composite.model.SalesBean">
		select pnum, odate, id, sum(price) as price from
			(select odate, pnum
			from orders natural join orderdetail)
				natural join product
				where id = #{id}
				and odate >= sysdate - 7
				group by pnum, odate, id
	</select>
	<select id = "GetMonthlySales" resultType = "composite.model.SalesBean">
		select pnum, to_char(odate, 'YYYY-MM') as odate, id, sum(price) as price from
				(select odate, pnum
				from orders natural join orderdetail)
					natural join product
					where id = #{id}
					and odate between add_months(trunc(sysdate, 'MM'), -5) 
					and trunc(sysdate)
					group by pnum, odate, id
	</select>
	<select id = "GetTotalSales" resultType = "composite.model.SalesBean">
		select pnum, id, sum(price) as price from
			(select odate, pnum
			from orders natural join orderdetail)
				natural join product
				where id = #{id}
				group by pnum, id
	</select>
	<select id = "GetAverageSale" resultType = "double">
		select avg(price) as price from
			(select sum(price) as price, id from 
				(select * from product natural join trainer
				where activity = #{activity}) natural join orderdetail group by id)
	</select>
	<select id = "GetWeeklyCount" resultType = "composite.model.SalesBean">
		select count(odnum) as pnum, odate from 
			(select odnum, pnum, onum from 
				orderdetail natural join product
					where id = #{id}) 
					natural join orders 
					where odate >= sysdate - 7 
					group by odate
	</select>
	<select id = "GetMonthlyCount" resultType = "composite.model.SalesBean">
		select sum(pnum) as pnum, odate from (
			select count(odnum) as pnum, to_char(odate, 'YYYY-MM') as odate from 
				(select odnum, onum from orderdetail natural join product where id = #{id}) 
				natural join orders 
					where odate between add_months(trunc(sysdate, 'MM'), -5) and trunc(sysdate) 
					group by odate)
				group by odate
	</select>
	<select id="GetReservationListAct" resultType = "composite.model.ReservationListActBean">
		<![CDATA[select r.*, t.activity from reservation r join trainer t 
		on r.tid = t.id
		where r.mid = #{mid} and r.rstate = 'true']]>
	</select>
	<select id="GetReservationDetailG" resultType = "composite.model.ReservationDetailGBean">
		select
		reservation.rdate, reservation.rtime, member.name, member.mphone, gym.gname, gym.gaddr1, gym.gaddr2, gym.gphone
		from reservation inner join member on reservation.tid = member.id
		inner join trainer on trainer.id = member.id
		inner join gym on trainer.gnum = gym.gnum
		where reservation.rnum = #{rnum}
	</select>
	<select id = "GetOrderList" resultType = "composite.model.MyOrderBean">
		select count(pnum) as orderCount, sum(price) as totalPrice, odate, onum from
			(select odate, onum, price, pnum from product 
			natural join
				(select odate, onum, pnum from orders 
					natural join 
				orderdetail where id = #{id}))
		group by odate, onum
	</select>
</mapper>